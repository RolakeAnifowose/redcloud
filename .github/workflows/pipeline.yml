name: Build, Cache, and Deploy to ECS

on:
  push:
    branches:
      - master

env:
  cluster-name: hello-world


jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx for caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # # Step 3: Log in to Docker Hub (optional)
      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      # # Step 4: Cache Docker layers
      # - name: Cache Docker layers
      #   uses: actions/cache@v3
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-buildx-

      # Step 5: Conditionally Generate Docker Compose Override for DB
      - name: Conditionally Generate Docker Compose Override
        run: |
          if [ -n "${{ secrets.DB_USER }}" ] && [ -n "${{ secrets.DB_PASSWORD }}" ]; then
            echo "version: '3.8'" > docker-compose.override.yml
            echo "services:" >> docker-compose.override.yml
            echo "  app:" >> docker-compose.override.yml
            echo "    environment:" >> docker-compose.override.yml
            echo "      - DB_USER=${{ secrets.DB_USER }}" >> docker-compose.override.yml
            echo "      - DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> docker-compose.override.yml
            echo "      - DB_HOST=${{ secrets.DB_HOST }}" >> docker-compose.override.yml
            echo "      - DB_NAME=${{ secrets.DB_NAME }}" >> docker-compose.override.yml
          fi

      # Step 6: Build Docker Compose services and use cache
      # - name: Build Docker Compose
      #   run: |
      #     docker-compose build \
      #       --progress=plain \
      #       --build-arg BUILDKIT_INLINE_CACHE=1 \
      #       --cache-from=type=local,src=/tmp/.buildx-cache \
      #       --cache-to=type=local,dest=/tmp/.buildx-cache

      # Step 7: Configure AWS Credentials for ECS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 8: Install Docker ECS Integration
      - name: Install Docker ECS Integration
        run: |
          sudo apt-get update
          sudo apt-get -y install awscli
          curl -Lo /usr/local/bin/docker-compose https://github.com/docker/compose/releases/download/v2.0.0/docker-compose-linux-x86_64
          chmod +x /usr/local/bin/docker-compose
          docker context create ecs myecscontext --from-env .env.local up
          docker context use myecscontext

      # Step 9: Deploy to ECS (Specify ECS Cluster via Environment Variable)
      - name: Deploy to ECS
        run: |
          ECS_CLUSTER_NAME={{ env.cluster-name }} docker-compose up