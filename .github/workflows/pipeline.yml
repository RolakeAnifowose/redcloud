name: Deploy to ECS

on:
  push:
    branches:
      - master

env:
  ECR_REPOSITORY: redcloud
  ECS_CLUSTER_NAME: hello-world
  ECS_SERVICE_NAME: nginx-hello-world
  ECS_TASK_DEFINITION_NAME: nginx-hello-world

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 5: Conditionally Generate Docker Compose Override for DB
      - name: Conditionally Generate Docker Compose Override
        run: |
          if [ -n "${{ secrets.DB_USER }}" ] && [ -n "${{ secrets.DB_PASSWORD }}" ]; then
            echo "version: '3.8'" > docker-compose.override.yml
            echo "services:" >> docker-compose.override.yml
            echo "  app:" >> docker-compose.override.yml
            echo "    environment:" >> docker-compose.override.yml
            echo "      - DB_USER=${{ secrets.DB_USER }}" >> docker-compose.override.yml
            echo "      - DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> docker-compose.override.yml
            echo "      - DB_HOST=${{ secrets.DB_HOST }}" >> docker-compose.override.yml
            echo "      - DB_NAME=${{ secrets.DB_NAME }}" >> docker-compose.override.yml
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        # uses: aws-actions/amazon-ecr-login@v2
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 556298987240.dkr.ecr.us-east-1.amazonaws.com

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REPOSITORY .
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/redcloud:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest"

      - name: Get Task Definition
        run: | 
          aws ecs describe-task-definition \
            --task-definition $ECS_TASK_DEFINITION_NAME \
            --query 'taskDefinition' \
            --output json > task-def.json
      
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-def.json
          container-name: redcloud
          image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/{{ env.ECR_REPOSITORY }}:latest

      # Step 8: Install Docker ECS Integration
      # - name: Install Docker ECS Integration
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get -y install awscli
      #     curl -Lo /usr/local/bin/docker-compose https://github.com/docker/compose/releases/download/v2.0.0/docker-compose-linux-x86_64
      #     chmod +x /usr/local/bin/docker-compose
      #     docker context create ecs redcloudecscontext --from-env
      #     docker context use redcloudecscontext

      # Step 9: Deploy to ECS (Specify ECS Cluster via Environment Variable)
      # - name: Deploy to ECS
      #   run: |
      #     ECS_CLUSTER_NAME={{ env.ECS_CLUSTER_NAME }} docker-compose up
      
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true